using System;
using System.Collections.Generic;
using System.Linq;
using eSyaConfigSetup.DL.DataLayer;
using eSyaConfigSetup.DL.Entities;
using eSyaConfigSetup.DO;
using eSyaConfigSetup.IF;
using Microsoft.EntityFrameworkCore;

namespace eSyaConfigSetup.DL.Repository
{
    public class ProcessMasterRepository:IProcessMasterRepository
    {
        #region Process Master

        public List<DO_ProcessMaster> GetProcessMaster()
        {
            try
            {
                using (var db = new eSyaEnterprise())
                {
                    var ds = db.GtCmprms
                        .Select(r => new DO_ProcessMaster
                        {
                            ProcessId = r.ProcessId,
                            ProcessDesc = r.ProcessDesc,
                            SystemControl = r.SystemControl,
                            ProcessControl = r.ProcessControl,
                            ActiveStatus = r.ActiveStatus
                        }).ToList();

                    return ds.ToList();
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DO_ReturnParameter InsertIntoProcessMaster(DO_ProcessMaster obj)
        {
            using (var db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {
                        bool is_ProcessIdExist = db.GtCmprms.Any(a => a.ProcessId == obj.ProcessId);
                        if (is_ProcessIdExist)
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Process Id is already exist." };
                        }

                        var is_ProcessDescExist = db.GtCmprms.Where(a => a.ProcessDesc.Trim().ToUpper().Replace(" ", "") == obj.ProcessDesc.Trim().ToUpper().Replace(" ", "")).FirstOrDefault();
                               
                        if (is_ProcessDescExist !=null)
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Process Desc is already exist." };
                        }

                        var pr_ms = new GtCmprms
                        {
                            ProcessId = obj.ProcessId,
                            ProcessDesc = obj.ProcessDesc,
                            SystemControl = obj.SystemControl,
                            ProcessControl = obj.ProcessControl,
                            ActiveStatus = obj.ActiveStatus,
                            CreatedBy = obj.UserID,
                            CreatedOn = System.DateTime.Now,
                            CreatedTerminal = obj.TerminalID
                        };
                        db.GtCmprms.Add(pr_ms);

                        db.SaveChanges();
                        dbContext.Commit();

                        return new DO_ReturnParameter() { Status = true, Message = "Process Master Created Successfully." };
                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }

        public DO_ReturnParameter UpdateProcessMaster(DO_ProcessMaster obj)
        {
            using (var db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {
                        var is_ProcessDescExist = db.GtCmprms.Where(w => w.ProcessDesc.Trim().ToUpper().Replace(" ", "") == obj.ProcessDesc.Trim().ToUpper().Replace(" ", "")
                                && w.ProcessId != obj.ProcessId).Count();
                        if (is_ProcessDescExist > 0)
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Process Desc is already exist." };
                        }

                        GtCmprms pr_ms = db.GtCmprms.Where(w => w.ProcessId == obj.ProcessId).FirstOrDefault();
                        if (pr_ms == null)
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Process Id is not exist" };
                        }

                        pr_ms.ProcessDesc = obj.ProcessDesc;
                        pr_ms.SystemControl = obj.SystemControl;
                        pr_ms.ProcessControl = obj.ProcessControl;
                        pr_ms.ActiveStatus = obj.ActiveStatus;
                        pr_ms.ModifiedBy = obj.UserID;
                        pr_ms.ModifiedOn = System.DateTime.Now;
                        pr_ms.ModifiedTerminal = obj.TerminalID;

                        db.SaveChanges();
                        dbContext.Commit();

                        return new DO_ReturnParameter() { Status = true, Message = "Process Updated Successfully." };
                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }

        #endregion

        #region Process Rule

        public List<DO_ProcessRule> GetProcessRule()
        {
            try
            {
                using (var db = new eSyaEnterprise())
                {
                    var ds = db.GtCmprru
                        .Select(r => new DO_ProcessRule
                        {
                            ProcessId = r.ProcessId,
                            RuleId = r.RuleId,
                            RuleDesc = r.RuleDesc,
                            ActiveStatus = r.ActiveStatus
                        }).ToList();

                    return ds.ToList();
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public List<DO_ProcessMaster> GetActiveProcessMaster()
        {
            try
            {
                using (var db = new eSyaEnterprise())
                {
                    var ds = db.GtCmprms.Where(w => w.ActiveStatus==true)
                        .Select(r => new DO_ProcessMaster
                        {
                            ProcessId = r.ProcessId,
                            ProcessDesc = r.ProcessDesc,

                        }).ToList();

                    return ds.ToList();
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public List<DO_ProcessRule> GetProcessRuleByProcessId(int processId)
        {
            try
            {
                using (var db = new eSyaEnterprise())
                {
                    var ds = db.GtCmprru.Where(w => w.ProcessId == processId)
                        .Select(r => new DO_ProcessRule
                        {
                            ProcessId = r.ProcessId,
                            RuleId = r.RuleId,
                            RuleDesc = r.RuleDesc,
                            ActiveStatus = r.ActiveStatus
                        }).ToList();

                    return ds.ToList();
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DO_ReturnParameter InsertIntoProcessRule(DO_ProcessRule obj)
        {
            using (var db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {
                        var is_RuleDescExist = db.GtCmprru.Where(w => w.RuleDesc.Trim().ToUpper().Replace(" ", "") == obj.RuleDesc.Trim().ToUpper().Replace(" ", "")
                                && w.ProcessId == obj.ProcessId).Count();
                        if (is_RuleDescExist > 0)
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Process Rule is already exist." };
                        }
                        bool is_RuleIdExist = db.GtCmprru.Any(a => a.RuleId == obj.RuleId &&a.ProcessId==obj.ProcessId);
                        if (is_RuleIdExist)
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "The combination of Process Id and Rule Id is already exist." };
                        }
                        if (obj.ActiveStatus)
                        {
                            var pr = db.GtCmprms.Where(w => w.ProcessId == obj.ProcessId).FirstOrDefault();
                            if (pr.ProcessControl == "S")
                            {
                                if (db.GtCmprru.Where(w => w.ProcessId == obj.ProcessId && w.ActiveStatus).Count() > 0)
                                    return new DO_ReturnParameter() { Status = false, Message = "Only one rule will be Active" };
                            }
                        }
                       
                        var pr_ru = new GtCmprru
                        {
                            RuleId = obj.RuleId,
                            ProcessId = obj.ProcessId,
                            RuleDesc = obj.RuleDesc,
                            ActiveStatus = obj.ActiveStatus,
                            CreatedBy = obj.UserID,
                            CreatedOn = System.DateTime.Now,
                            CreatedTerminal = obj.TerminalID
                        };
                        db.GtCmprru.Add(pr_ru);

                        db.SaveChanges();
                        dbContext.Commit();

                        return new DO_ReturnParameter() { Status = true, Message = "Process Rule is Created Successfully." };
                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }

        public DO_ReturnParameter UpdateProcessRule(DO_ProcessRule obj)
        {
            using (var db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {
                        var is_RuleDescExist = db.GtCmprru.Where(w => w.RuleDesc.ToUpper().Replace(" ", "") == obj.RuleDesc.ToUpper().Replace(" ", "")
                                && w.ProcessId != obj.ProcessId && w.RuleId != obj.RuleId).Count();
                        if (is_RuleDescExist > 0)
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Process Rule is already exist." };
                        }

                        GtCmprru pr_ru = db.GtCmprru.Where(w => w.RuleId == obj.RuleId && w.ProcessId==obj.ProcessId).FirstOrDefault();
                        if (pr_ru == null)
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Process Rule is not exist" };
                        }
                        if (obj.ActiveStatus)
                        {
                            var pr = db.GtCmprms.Where(w => w.ProcessId == obj.ProcessId).FirstOrDefault();
                            if (pr.ProcessControl == "S")
                            {
                                if (db.GtCmprru.Where(w => w.ProcessId == obj.ProcessId && w.RuleId != obj.RuleId && w.ActiveStatus).Count() > 0)
                                    return new DO_ReturnParameter() { Status = false, Message = "Only one rule will be Active" };
                            }
                        }

                        pr_ru.RuleDesc = obj.RuleDesc;
                        pr_ru.ActiveStatus = obj.ActiveStatus;
                        pr_ru.ModifiedBy = obj.UserID;
                        pr_ru.ModifiedOn = System.DateTime.Now;
                        pr_ru.ModifiedTerminal = obj.TerminalID;

                        db.SaveChanges();
                        dbContext.Commit();

                        return new DO_ReturnParameter() { Status = true, Message = "Process Rule Updated Successfully." };
                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }

        #endregion
    }
}
