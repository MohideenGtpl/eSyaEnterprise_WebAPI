using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using eSyaConfigSetup.DL.DataLayer;
using eSyaConfigSetup.DL.Entities;
using eSyaConfigSetup.DO;
using eSyaConfigSetup.IF;
using Microsoft.EntityFrameworkCore;
namespace eSyaConfigSetup.DL.Repository
{
    public class FormsRepository:IFormsRepository
    {
        public async Task<List<DO_Forms>> GetFormDetails()
        {
            try
            {
                using (eSyaEnterprise db = new eSyaEnterprise())
                {
                    var result = db.GtEcfmfd
                                  .Where(w => w.ActiveStatus)
                                  .Select(r => new DO_Forms
                                  {
                                      FormID = r.FormId,
                                      FormName = r.FormName,
                                      ControllerName = r.ControllerName,
                                  }).OrderBy(o => o.FormID).ToListAsync();
                    return await result;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public async Task<List<DO_Forms>> GetInternalFormDetails()
        {
            try
            {
                using (eSyaEnterprise db = new eSyaEnterprise())
                {
                    var result = db.GtEcfmnm
                                  // .Where(w => w.ActiveStatus)
                                  .Select(r => new DO_Forms
                                  {
                                      FormID = r.FormId,
                                      InternalFormNumber = r.FormIntId,
                                      FormName = r.FormDescription,
                                      NavigateURL = r.NavigateUrl
                                  }).ToListAsync();
                    return await result;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        public async Task<DO_Forms> GetFormDetailsByID(int formID)
        {
            try
            {
                using (eSyaEnterprise db = new eSyaEnterprise())
                {
                    var result = db.GtEcfmfd
                                  .Where(w => w.FormId == formID && w.ActiveStatus)
                                  .Select(r => new DO_Forms
                                  {
                                      FormID = r.FormId,
                                      FormName = r.FormName,
                                      ControllerName = r.ControllerName,
                                      IsDocumentNumberRequired = r.IsDocumentNumberRequired,
                                      IsStoreLink = r.IsStoreLink,
                                      IsMaterial = r.IsMaterial,
                                      IsPharmacy = r.IsPharmacy,
                                      IsStationary = r.IsStationary,
                                      IsCafeteria = r.IsCafeteria,
                                      IsFandB = r.IsFandB,
                                      IsDoctor = r.IsDoctor
                                  }).FirstOrDefaultAsync();
                    return await result;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public async Task<List<DO_Forms>> GetInternalFormByFormID(int formID)
        {
            try
            {
                using (eSyaEnterprise db = new eSyaEnterprise())
                {
                    var result = db.GtEcfmnm
                                  .Where(w => w.FormId == formID)
                                  .Select(r => new DO_Forms
                                  {
                                      FormID = r.FormId,
                                      InternalFormNumber = r.FormIntId,
                                      NavigateURL = r.NavigateUrl,
                                      FormDescription = r.FormDescription,
                                      ActiveStatus = r.ActiveStatus,
                                  }).Distinct().ToListAsync();
                    return await result;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public async Task<DO_ReturnParameter> InsertUpdateIntoFormMaster(DO_Forms obj)
        {
            using (var db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {
                        if (obj.IsInsert)
                        {
                            if (db.GtEcfmfd.Where(w => w.FormId == obj.FormID).Count() > 0)
                            {
                                return new DO_ReturnParameter() { Status = false, Message = "Form ID Already Exists" };
                            }
                        }
                        if (db.GtEcfmfd.Where(w => w.FormId == obj.FormID).Count() <= 0)
                        {
                            var ag = new GtEcfmfd
                            {
                                FormId = obj.FormID,
                                FormName = obj.FormName,
                                ControllerName = obj.ControllerName,
                                IsDocumentNumberRequired = obj.IsDocumentNumberRequired,
                                IsStoreLink = obj.IsStoreLink,
                                IsMaterial = obj.IsMaterial,
                                IsPharmacy = obj.IsPharmacy,
                                IsStationary = obj.IsStationary,
                                IsCafeteria = obj.IsCafeteria,
                                IsFandB = obj.IsFandB,
                                IsDoctor = obj.IsDoctor,
                                ActiveStatus = true,
                                CreatedBy = obj.UserID,
                                CreatedOn = System.DateTime.Now,
                                CreatedTerminal = obj.TerminalID
                            };
                            db.GtEcfmfd.Add(ag);

                            var formNumber = db.GtEcfmnm.Where(w => w.FormId == obj.FormID).Count();
                            string internalFormID = obj.FormID.ToString() + "_01";
                            obj.NavigateURL = obj.ControllerName + "/V_" + internalFormID;
                            if (formNumber <= 0)
                            {
                                formNumber = formNumber + 1;
                                GtEcfmnm fn = new GtEcfmnm
                                {
                                    FormId = obj.FormID,
                                    FormIntId = internalFormID,
                                    NavigateUrl = obj.NavigateURL,
                                    FormDescription = "Standard",
                                    ActiveStatus = obj.ActiveStatus,
                                    CreatedOn = DateTime.Now,
                                    CreatedTerminal = obj.TerminalID,
                                    CreatedBy = obj.UserID,

                                };
                                db.GtEcfmnm.Add(fn);
                            }
                        }
                        else
                        {
                            var ag = db.GtEcfmfd.Where(w => w.FormId == obj.FormID).FirstOrDefault();
                            ag.FormName = obj.FormName;
                            ag.IsDocumentNumberRequired = obj.IsDocumentNumberRequired;
                            ag.IsStoreLink = obj.IsStoreLink;
                            ag.IsMaterial = obj.IsMaterial;
                            ag.IsPharmacy = obj.IsPharmacy;
                            ag.IsStationary = obj.IsStationary;
                            ag.IsCafeteria = obj.IsCafeteria;
                            ag.IsFandB = obj.IsFandB;
                            ag.IsDoctor = obj.IsDoctor;
                            ag.ModifiedBy = obj.UserID;
                            ag.ModifiedOn = System.DateTime.Now;
                            ag.ModifiedTerminal = obj.TerminalID;
                        }

                       await db.SaveChangesAsync();
                        dbContext.Commit();

                        return new DO_ReturnParameter() { Status = true, Message = "Created/Updated Successfully" };
                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }

        public async Task<DO_ReturnParameter> InsertIntoInternalForm(DO_Forms obj)
        {
            using (eSyaEnterprise db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {
                        var fm = db.GtEcfmfd.Where(w => w.FormId == obj.FormID).FirstOrDefault();
                        obj.NavigateURL = fm.ControllerName + "/V_" + obj.InternalFormNumber;

                        var fn = db.GtEcfmnm.Where(w => w.FormId == obj.FormID && w.FormIntId == obj.InternalFormNumber).FirstOrDefault();
                        if (fn != null)
                        {
                            fn.NavigateUrl = obj.NavigateURL;
                            fn.FormDescription = obj.FormDescription;
                            fn.ActiveStatus = obj.ActiveStatus;
                            fn.ModifiedBy = obj.UserID;
                            fn.ModifiedOn = DateTime.Now;
                            fn.ModifiedTerminal = obj.TerminalID;
                        }
                        else
                        {
                            fn = new GtEcfmnm
                            {
                                FormId = obj.FormID,
                                FormIntId = obj.InternalFormNumber,
                                NavigateUrl = obj.NavigateURL,
                                FormDescription = obj.FormDescription,
                                ActiveStatus = obj.ActiveStatus,
                                CreatedOn = DateTime.Now,
                                CreatedTerminal = obj.TerminalID,
                                CreatedBy = obj.UserID,

                            };
                            db.GtEcfmnm.Add(fn);
                        }

                        await db.SaveChangesAsync();
                        dbContext.Commit();

                        return new DO_ReturnParameter() { Status = true, Message = "Created/Updated Successfully" };
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }

        public async Task<List<DO_FormAction>> GetFormAction()
        {
            try
            {
                using (var db = new eSyaEnterprise())
                {
                    var fa = db.GtEcfmac
                        .Select(r => new DO_FormAction
                        {
                            ActionId = r.ActionId,
                            ActionDesc = r.ActionDesc,
                            ActiveStatus = r.ActiveStatus,
                        }).ToListAsync();
                    return await fa;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public async Task<List<DO_FormAction>> GetFormActionByID(int formID)
        {
            try
            {
                using (var db = new eSyaEnterprise())
                {
                    var fa = db.GtEcfmac
                        .GroupJoin(db.GtEcfmal.Where(w => w.FormId == formID),
                        a => a.ActionId,
                        f => f.ActionId,
                        (a, f) => new { a, f = f.FirstOrDefault() })
                        .Select(r => new DO_FormAction
                        {
                            ActionId = r.a.ActionId,
                            ActionDesc = r.a.ActionDesc,
                            ActiveStatus = r.f != null ? r.f.ActiveStatus : false,
                        }).ToListAsync();
                    return await fa;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        public async Task<DO_ReturnParameter> InsertIntoFormAction(DO_Forms obj)
        {
            using (eSyaEnterprise db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {
                        var fa = db.GtEcfmal.Where(w => w.FormId == obj.FormID);
                        foreach (GtEcfmal f in fa)
                        {
                            f.ActiveStatus = false;
                            f.ModifiedBy = obj.UserID;
                            f.ModifiedOn = System.DateTime.Now;
                            f.ModifiedTerminal = obj.TerminalID;
                        }
                        await db.SaveChangesAsync();

                        if (obj.l_FormAction != null)
                        {
                            foreach (DO_FormAction i in obj.l_FormAction)
                            {
                                var obj_FA = db.GtEcfmal.Where(w => w.FormId == obj.FormID && w.ActionId == i.ActionId).FirstOrDefault();
                                if (obj_FA != null)
                                {
                                    obj_FA.ActiveStatus = true;
                                    obj_FA.ModifiedBy = obj.UserID;
                                    obj_FA.ModifiedOn = DateTime.Now;
                                    obj_FA.ModifiedTerminal = System.Environment.MachineName;
                                }
                                else
                                {
                                    obj_FA = new GtEcfmal();
                                    obj_FA.FormId = obj.FormID;
                                    obj_FA.ActionId = i.ActionId;
                                    obj_FA.ActiveStatus = true;
                                    obj_FA.CreatedBy = obj.UserID;
                                    obj_FA.CreatedOn = DateTime.Now;
                                    obj_FA.CreatedTerminal = System.Environment.MachineName;
                                    db.GtEcfmal.Add(obj_FA);
                                }
                            }
                            await db.SaveChangesAsync();
                        }

                       
                        dbContext.Commit();

                        return new DO_ReturnParameter() { Status = true, Message = "Created/Updated Successfully" };
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }

    }
}
