using System;
using System.Collections.Generic;
using System.Linq;
using eSyaConfigSetup.DL.DataLayer;
using eSyaConfigSetup.DL.Entities;
using eSyaConfigSetup.DO;
using eSyaConfigSetup.IF;
using Microsoft.EntityFrameworkCore;
using System.Threading.Tasks;
namespace eSyaConfigSetup.DL.Repository
{
   public class BusinessStructureRepository:IBusinessStructureRepository
    {
       

        #region Business Entity
        public async Task<List<DO_BusinessEntity>> GetBusinessEntities()
        {
            try
            {
                using (eSyaEnterprise db = new eSyaEnterprise())
                {
                    var result = db.GtEcbsen

                                  .Select(be => new DO_BusinessEntity
                                  {
                                      BusinessId =be.BusinessId,
                                      BusinessDesc=be.BusinessDesc,
                                      IsMultiSegmentApplicable=be.IsMultiSegmentApplicable,
                                      UsageStatus=be.UsageStatus,
                                      ActiveStatus=be.ActiveStatus
                                  }).OrderBy(b=>b.BusinessId).ToListAsync();
                   return await result;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public async Task<DO_BusinessEntity> GetBusinessEntityInfo(int BusinessId)
        {
            try
            {
                using (var db = new eSyaEnterprise())
                {
                    var ds = db.GtEcbsen
                        .Where(w => w.BusinessId == BusinessId)
                        .Select(r => new DO_BusinessEntity
                        {
                            BusinessId = r.BusinessId,
                            BusinessDesc = r.BusinessDesc,
                            IsMultiSegmentApplicable = r.IsMultiSegmentApplicable,
                            UsageStatus = r.UsageStatus,
                            ActiveStatus = r.ActiveStatus
                        }).FirstOrDefaultAsync();

                    return await ds;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public async Task<DO_ReturnParameter> InsertBusinessEntity(DO_BusinessEntity businessentity)
        {
            using (var db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {
                        GtEcbsen is_EntityDescExists = db.GtEcbsen.FirstOrDefault(u => u.BusinessDesc.ToUpper().Replace(" ", "") == businessentity.BusinessDesc.ToUpper().Replace(" ", ""));
                        if (is_EntityDescExists != null)
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Business Entity Description already Exists." };

                        }

                        int _businessID = db.GtEcbsen.Select(c => c.BusinessId).DefaultIfEmpty().Max();
                        _businessID = _businessID + 1;

                        var b_Entity = new GtEcbsen
                        {
                            BusinessId = _businessID,
                            BusinessDesc = businessentity.BusinessDesc,
                            IsMultiSegmentApplicable = businessentity.IsMultiSegmentApplicable,
                            UsageStatus = false,
                            ActiveStatus = businessentity.ActiveStatus,
                            FormId = businessentity.FormID,
                            CreatedBy = businessentity.UserID,
                            CreatedOn = System.DateTime.Now,
                            CreatedTerminal = businessentity.TerminalID
                        };
                        db.GtEcbsen.Add(b_Entity);
                        await db.SaveChangesAsync();
                        dbContext.Commit();
                        return new DO_ReturnParameter() { Status = true, Message = "Business Entity Created Successfully." };
                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }

        public async Task<DO_ReturnParameter> UpdateBusinessEntity(DO_BusinessEntity businessentity)
        {
            using (var db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {
                        GtEcbsen is_EntityExists = db.GtEcbsen.FirstOrDefault(be => be.BusinessDesc.ToUpper().Replace(" ", "") == businessentity.BusinessDesc.ToUpper().Replace(" ", "") && be.BusinessId != businessentity.BusinessId);
                        if (is_EntityExists != null)
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Business Entity already Exists." };

                        }

                        GtEcbsen b_Entity = db.GtEcbsen.Where(be => be.BusinessId == businessentity.BusinessId).FirstOrDefault();
                        if (b_Entity != null)
                        {
                            b_Entity.BusinessDesc = businessentity.BusinessDesc;
                            b_Entity.IsMultiSegmentApplicable = businessentity.IsMultiSegmentApplicable;
                            b_Entity.ActiveStatus = businessentity.ActiveStatus;
                            b_Entity.ModifiedBy = businessentity.UserID;
                            b_Entity.ModifiedOn = System.DateTime.Now;
                            b_Entity.ModifiedTerminal = businessentity.TerminalID;
                            await db.SaveChangesAsync();
                            dbContext.Commit();

                            return new DO_ReturnParameter() { Status = true, Message = "Business Entity Updated Successfully." };
                        }
                        else
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Business Entity not found." };

                        }
                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }

        public async Task<DO_ReturnParameter> DeleteBusinessEntity(int BusinessEntityId)
        {
            using (var db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {
                        GtEcbsen bu_en = db.GtEcbsen.Where(w => w.BusinessId == BusinessEntityId).FirstOrDefault();
                        if (bu_en == null)
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Busienss Entity is not exist" };
                        }

                        if (bu_en.UsageStatus == true)
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Busienss Entity in used, Can't Delete" };
                        }

                        db.GtEcbsen.Remove(bu_en);

                        await db.SaveChangesAsync();
                        dbContext.Commit();

                        return new DO_ReturnParameter() { Status = true, Message = "Deleted Successfully." };
                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }

        public async Task<List<DO_BusinessEntity>> GetActiveBusinessEntities()
        {
            try
            {
                using (eSyaEnterprise db = new eSyaEnterprise())
                {
                    var result = db.GtEcbsen.Where(x=>x.ActiveStatus==true)

                                  .Select(be => new DO_BusinessEntity
                                  {
                                      BusinessId = be.BusinessId,
                                      BusinessDesc = be.BusinessDesc
                                     
                                  }).OrderBy(b => b.BusinessId).ToListAsync();
                    return await result;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion  Business Entity

        #region  Business Segment
        public async Task <List<DO_BusinessSegment>> GetBusinessSegmentByBusinessId(int BusinessId)
        {
            try
            {
                using (var db = new eSyaEnterprise())
                {
                    var segments = db.GtEcbssg.Where(x => x.BusinessId == BusinessId)

                        .Join(db.GtEccuco,
                         x => x.CurrencyCode,
                         y => y.CurrencyCode,
                        (x, y) => new DO_BusinessSegment
                        { 
                            BusinessId= x.BusinessId,
                            SegmentId= x.SegmentId,
                            SegmentDesc= x.SegmentDesc,
                            IsLocationApplicable= x.IsLocationApplicable,
                            Isdcode= x.Isdcode,
                            CurrencyCode= x.CurrencyCode,
                            CurrencyName=y.CurrencyName,
                            TaxIdentification= x.TaxIdentification,
                            ActiveStatus = x.ActiveStatus
                        }).ToListAsync();

                    return await segments;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public async Task<DO_ReturnParameter> InsertBusinessSegment(DO_BusinessSegment BusinessSegment)
        {
            using (var db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {

                        GtEcbsen Chk_EntityAllowedSingleSegment = db.GtEcbsen.Where(x => x.BusinessId == BusinessSegment.BusinessId && x.IsMultiSegmentApplicable == false &&x.ActiveStatus==true).FirstOrDefault();

                        if (Chk_EntityAllowedSingleSegment != null)
                        {
                          GtEcbssg Is_SiglementExistsinoneEntity = db.GtEcbssg.FirstOrDefault(s => s.BusinessId == Chk_EntityAllowedSingleSegment.BusinessId);
                            if (Is_SiglementExistsinoneEntity != null)
                            {
                                return new DO_ReturnParameter() { Status = false, Message = "Selected Entity Allowed only one Segment." };
                            }
                        }

                        GtEcbssg is_SegmentIdExists = db.GtEcbssg.FirstOrDefault(s => s.BusinessId == BusinessSegment.BusinessId && s.SegmentId == BusinessSegment.SegmentId);
                       
                        if (is_SegmentIdExists != null)
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Business Segment ID is already Exists for selected Entity." };

                        }


                        GtEcbssg is_SegmentDescExists = db.GtEcbssg.FirstOrDefault(s => s.SegmentDesc.ToUpper().Replace(" ", "") == BusinessSegment.SegmentDesc.ToUpper().Replace(" ", "")
                        && s.BusinessId==BusinessSegment.BusinessId );

                        if (is_SegmentDescExists != null)
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Business Segment Description already Exists for selected Entity." };

                        }
                       
                        var b_Segment = new GtEcbssg
                        {
                            BusinessId = BusinessSegment.BusinessId,
                            SegmentId= BusinessSegment.SegmentId,
                            SegmentDesc=BusinessSegment.SegmentDesc,
                            IsLocationApplicable=BusinessSegment.IsLocationApplicable,
                            Isdcode=BusinessSegment.Isdcode,
                            CurrencyCode=BusinessSegment.CurrencyCode,
                            TaxIdentification=BusinessSegment.TaxIdentification,
                            ActiveStatus = BusinessSegment.ActiveStatus,
                            CreatedBy = BusinessSegment.UserID,
                            CreatedOn = System.DateTime.Now,
                            CreatedTerminal = BusinessSegment.TerminalID
                        };
                        db.GtEcbssg.Add(b_Segment);
                       await db.SaveChangesAsync();
                        dbContext.Commit();
                        return new DO_ReturnParameter() { Status = true, Message = "Business Segment Created Successfully." };

                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }

        public async Task<DO_ReturnParameter> UpdateBusinessSegment(DO_BusinessSegment BusinessSegment)
        {
            using (var db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {
                        GtEcbssg is_SegmentExists = db.GtEcbssg.FirstOrDefault(bs => bs.SegmentDesc.ToUpper().Replace(" ", "") == BusinessSegment.SegmentDesc.ToUpper().Replace(" ", "")&&
                        bs.BusinessId == BusinessSegment.BusinessId && bs.SegmentId != BusinessSegment.SegmentId);
                        if (is_SegmentExists != null)
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Business Segment Description already Exists." };

                        }

                        GtEcbssg b_Segment = db.GtEcbssg.Where(bs => bs.SegmentId == BusinessSegment.SegmentId && bs.BusinessId==BusinessSegment.BusinessId).FirstOrDefault();
                        if (b_Segment != null)
                        {
                            b_Segment.SegmentDesc = BusinessSegment.SegmentDesc;
                            b_Segment.IsLocationApplicable = BusinessSegment.IsLocationApplicable;
                            b_Segment.Isdcode = BusinessSegment.Isdcode;
                            b_Segment.CurrencyCode = BusinessSegment.CurrencyCode;
                            b_Segment.TaxIdentification = BusinessSegment.TaxIdentification;
                            b_Segment.ActiveStatus = BusinessSegment.ActiveStatus;
                            b_Segment.ModifiedBy = BusinessSegment.UserID;
                            b_Segment.ModifiedOn = System.DateTime.Now;
                            b_Segment.ModifiedTerminal = BusinessSegment.TerminalID;
                           await db.SaveChangesAsync();
                            dbContext.Commit();

                            return new DO_ReturnParameter() { Status = true, Message = "Business Segment Updated Successfully." };
                        }
                        else
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Business Segment not found." };

                        }
                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }

        public async Task <List<DO_BusinessSegment>> GetActiveBusinessSegmentbyBusinessId(int BusinessId)
        {
            try
            {
                using (var db = new eSyaEnterprise())
                {
                    var segments = db.GtEcbssg.Where(x => x.BusinessId == BusinessId && x.ActiveStatus==true)
                        .Select(s => new DO_BusinessSegment
                        {
                            SegmentId = s.SegmentId,
                            SegmentDesc = s.SegmentDesc
                            
                        }).ToListAsync();

                    return await segments;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion Business Segment

        #region Business Location
        public async Task <List<DO_BusinessLocation>> GetBusinessLocationByBusinessIdandSegmentId(int BusinessId, int SegmentId)
        {
            try
            {
                using (var db = new eSyaEnterprise())
                {
                    var locations = db.GtEcbsln.Where(x=> x.BusinessId == BusinessId &&x.SegmentId==SegmentId)
                        .Select(l => new DO_BusinessLocation
                        {
                            BusinessId = l.BusinessId,
                            SegmentId = l.SegmentId,
                            LocationId = l.LocationId,
                            LocationCode = l.LocationCode,
                            LocationDescription = l.LocationDescription,
                            BusinessKey=l.BusinessKey,
                            ActiveStatus = l.ActiveStatus
                        }).ToListAsync();

                    return await locations;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public async Task <DO_ReturnParameter> InsertBusinessLocation(DO_BusinessLocation location)
        {
            using (var db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {

                        GtEcbssg Chk_SegmentAllowedSingleLocation = db.GtEcbssg.Where(x => x.SegmentId == location.SegmentId && x.IsLocationApplicable == false && x.ActiveStatus == true).FirstOrDefault();

                        if (Chk_SegmentAllowedSingleLocation != null)
                        {
                            GtEcbsln IsLocationExistsinoneSegment = db.GtEcbsln.FirstOrDefault(s => s.SegmentId == Chk_SegmentAllowedSingleLocation.SegmentId);
                            if (IsLocationExistsinoneSegment != null)
                            {
                                return new DO_ReturnParameter() { Status = false, Message = "Selected Entity and Segment Allowed only one Location." };
                            }
                        }

                        GtEcbsln is_LocationIdExists = db.GtEcbsln.FirstOrDefault(l => l.BusinessId == location.BusinessId && l.SegmentId == location.SegmentId && l.LocationId == location.LocationId);

                        if (is_LocationIdExists != null)
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Location ID already Exists for selected Entity and Segment." };

                        }

                        GtEcbsln is_LocationCodeExists = db.GtEcbsln.FirstOrDefault(l => l.LocationCode.ToUpper().Replace(" ", "") == location.LocationCode.ToUpper().Replace(" ", "")
                         && l.BusinessId == location.BusinessId && l.SegmentId == location.SegmentId);

                        if (is_LocationCodeExists != null)
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Location Code already Exists for selected Entity and Segment." };

                        }

                        GtEcbsln is_locDescExists = db.GtEcbsln.FirstOrDefault(l => l.LocationDescription.ToUpper().Replace(" ", "") == location.LocationDescription.ToUpper().Replace(" ", "")
                        && l.BusinessId == location.BusinessId && l.SegmentId == location.SegmentId);

                        if (is_locDescExists != null)
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Business Location Description already Exists for selected Entity and Segment." };

                        }
                        int Business_Key = Convert.ToInt32(location.BusinessId.ToString() + location.SegmentId.ToString() + location.LocationId.ToString());
                        var is_BusinessKeyExist = db.GtEcbsln.Where(x => x.ActiveStatus == true &&x.BusinessKey== Business_Key).FirstOrDefault();
                        if (is_BusinessKeyExist != null)
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Business Key already Exists for selected Entity and Segment and Location ID." };
                        }
                        var b_Location = new GtEcbsln
                        {
                            BusinessId = location.BusinessId,
                            SegmentId = location.SegmentId,
                            LocationId = location.LocationId,
                            LocationCode = location.LocationCode,
                            LocationDescription = location.LocationDescription,
                            BusinessKey = Business_Key,
                            ActiveStatus = location.ActiveStatus,
                            CreatedBy = location.UserID,
                            CreatedOn = System.DateTime.Now,
                            CreatedTerminal = location.TerminalID
                        };
                        db.GtEcbsln.Add(b_Location);
                      await  db.SaveChangesAsync();
                        dbContext.Commit();
                        return new DO_ReturnParameter() { Status = true, Message = "Business Location Created Successfully." };

                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }

        public async Task<DO_ReturnParameter> UpdateBusinessLocation(DO_BusinessLocation location)
        {
            using (var db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {
                        GtEcbsln is_locDescExists = db.GtEcbsln.FirstOrDefault(l => l.LocationDescription.ToUpper().Replace(" ", "") == location.LocationDescription.ToUpper().Replace(" ", "") &&
                        l.BusinessId == location.BusinessId && l.SegmentId == location.SegmentId && l.LocationId != location.LocationId);
                        if (is_locDescExists != null)
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Business Location already Exists for selected Entity and Segment." };

                        }
                        GtEcbsln is_LocCodeExists = db.GtEcbsln.FirstOrDefault(l => l.LocationCode.ToUpper().Replace(" ", "") == location.LocationCode.ToUpper().Replace(" ", "")
                        && l.BusinessId == location.BusinessId && l.SegmentId == location.SegmentId && l.LocationId != location.LocationId);

                        if (is_LocCodeExists != null)
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Location Code already Exists for selected Entity and Segment." };

                        }

                        GtEcbsln b_loc = db.GtEcbsln.Where(bl => bl.BusinessId == location.BusinessId && bl.SegmentId == location.SegmentId  && bl.LocationId==location.LocationId).FirstOrDefault();
                        if (b_loc != null)
                        {
                            b_loc.LocationCode = location.LocationCode;
                            b_loc.LocationDescription = location.LocationDescription;
                            b_loc.ActiveStatus = location.ActiveStatus;
                            b_loc.ModifiedBy = location.UserID;
                            b_loc.ModifiedOn = System.DateTime.Now;
                            b_loc.ModifiedTerminal = location.TerminalID;
                           await db.SaveChangesAsync();
                            dbContext.Commit();

                            return new DO_ReturnParameter() { Status = true, Message = "Business Location Updated Successfully." };
                        }
                        else
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Business Location not found." };

                        }
                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }
        #endregion Business Location

        #region Business Stores
        //public async Task <DO_ReturnParameter> InsertOrUpdateBusinessStores(DO_BusinessStores store)
        //{
        //    using (var db = new eSyaEnterprise())
        //    {
        //        using (var dbContext = db.Database.BeginTransaction())
        //        {
        //            try
        //            {

        //                GtCmbssc bs_store = db.GtCmbssc.Where(x => x.BusinessKey == store.BusinessKey && x.StoreCode == store.StoreCode).FirstOrDefault();
        //                if (bs_store == null)
        //                {
        //                    var B_Store = new GtCmbssc
        //                    {
        //                        BusinessKey=store.BusinessKey,
        //                        StoreCode=store.StoreCode,
        //                        ActiveStatus = store.ActiveStatus,
        //                        CreatedBy = store.UserID,
        //                        CreatedOn = System.DateTime.Now,
        //                        CreatedTerminal = store.TerminalID
        //                    };
        //                    db.GtCmbssc.Add(B_Store);
        //                   await db.SaveChangesAsync();
        //                    dbContext.Commit();
        //                    return new DO_ReturnParameter() { Status = true, Message = "Business Store Created Successfully." };
        //                }
        //                else
        //                {
        //                    bs_store.ActiveStatus = store.ActiveStatus;
        //                    bs_store.ModifiedBy = store.UserID;
        //                    bs_store.ModifiedOn = System.DateTime.Now;
        //                    bs_store.ModifiedTerminal = store.TerminalID;
        //                    await db.SaveChangesAsync();
        //                    dbContext.Commit();
        //                    return new DO_ReturnParameter() { Status = true, Message = "Business Store Updated Successfully." };
        //                }
        //            }
        //            catch (DbUpdateException ex)
        //            {
        //                dbContext.Rollback();
        //                throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
        //            }
        //            catch (Exception ex)
        //            {
        //                dbContext.Rollback();
        //                throw ex;
        //            }
        //        }
        //    }
        //}

        //public async Task<List<DO_BusinessStores>> GetBusinessStores(int Businesskey)
        //{
        //    try
        //    {
        //        using (var db = new eSyaEnterprise())
        //        {
        //            var b_stores = db.GtCmbssc.Where(x=>x.BusinessKey==Businesskey)

        //            .Select(bs => new DO_BusinessStores
        //            {
        //                BusinessKey=bs.BusinessKey,
        //                StoreCode=bs.StoreCode,
        //                ActiveStatus=bs.ActiveStatus

        //            }).ToListAsync();

        //            return await b_stores;
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        throw ex;
        //    }
        //}

        #endregion Business Stores

        #region Business Statutory Details
        
        //public async Task <DO_ReturnParameter> InsertOrUpdateBusinessStatutoryDetails(DO_BusinessStatutoryDetails statutorydetails)
        //{
        //    using (var db = new eSyaEnterprise())
        //    {
        //        using (var dbContext = db.Database.BeginTransaction())
        //        {
        //            try
        //            {

        //                GtCmbssd BS_details = db.GtCmbssd.Where(x => x.BusinessKey == statutorydetails.BusinessKey && x.StatutoryCode == statutorydetails.StatutoryCode).FirstOrDefault();
        //                if (BS_details == null)
        //                {
        //                    var statutory_details = new GtCmbssd
        //                    {
        //                        BusinessKey= statutorydetails.BusinessKey,
        //                        StatutoryCode=statutorydetails.StatutoryCode,
        //                        StatutoryDetail=statutorydetails.StatutoryDetail,
        //                        ActiveStatus = statutorydetails.ActiveStatus,
        //                        CreatedBy = statutorydetails.UserID,
        //                        CreatedOn = System.DateTime.Now,
        //                        CreatedTerminal = statutorydetails.TerminalID
        //                    };
        //                    db.GtCmbssd.Add(statutory_details);
        //                   await db.SaveChangesAsync();
        //                    dbContext.Commit();
        //                    return new DO_ReturnParameter() { Status = true, Message = "Business Statutory Details Created Successfully." };
        //                }
        //                else
        //                {
        //                    BS_details.StatutoryDetail = statutorydetails.StatutoryDetail;
        //                    BS_details.ActiveStatus = statutorydetails.ActiveStatus;
        //                    BS_details.ModifiedBy = statutorydetails.UserID;
        //                    BS_details.ModifiedOn = System.DateTime.Now;
        //                    BS_details.ModifiedTerminal = statutorydetails.TerminalID;
        //                   await db.SaveChangesAsync();
        //                    dbContext.Commit();
        //                    return new DO_ReturnParameter() { Status = true, Message = "Business Statutory Details Updated Successfully." };
        //                }
        //            }
        //            catch (DbUpdateException ex)
        //            {
        //                dbContext.Rollback();
        //                throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
        //            }
        //            catch (Exception ex)
        //            {
        //                dbContext.Rollback();
        //                throw ex;
        //            }
        //        }
        //    }
        //}

        //public async Task <List<DO_BusinessStatutoryDetails>> GetBusinessStatutoryDetails(int BusinessKey)
        //{
        //    try
        //    {
        //        using (var db = new eSyaEnterprise())
        //        {
        //            var statutorydetails = db.GtCmbssd.Where(x=>x.BusinessKey== BusinessKey)

        //            .Select(sd => new DO_BusinessStatutoryDetails
        //            {
        //                BusinessKey = sd.BusinessKey,
        //                StatutoryCode=sd.StatutoryCode,
        //                StatutoryDetail=sd.StatutoryDetail,
        //                ActiveStatus = sd.ActiveStatus

        //            }).ToListAsync();

        //            return await statutorydetails;
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        throw ex;
        //    }
        //}
        #endregion Business Statutory Details
    }
}
