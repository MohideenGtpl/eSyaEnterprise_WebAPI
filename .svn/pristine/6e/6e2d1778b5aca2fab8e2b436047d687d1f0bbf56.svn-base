using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using eSyaConfigSetup.DL.DataLayer;
using eSyaConfigSetup.DL.Entities;
using eSyaConfigSetup.DO;
using eSyaConfigSetup.IF;
using Microsoft.EntityFrameworkCore;
namespace eSyaConfigSetup.DL.Repository
{
    public class CurrencyMasterRepository:ICurrencyMasterRepository
    {
        #region Currency Master

        public async Task<List<DO_CurrencyMaster>> GetCurrencyMaster()
        {
            try
            {
                using (var db = new eSyaEnterprise())
                {
                    var ds = db.GtEccuco
                        .Select(r => new DO_CurrencyMaster
                        {
                            CurrencyCode = r.CurrencyCode,
                            CurrencyName = r.CurrencyName,
                            Symbol = r.Symbol,
                            DecimalPlaces = r.DecimalPlaces,
                            ShowInMillions = r.ShowInMillions,
                            SymbolSuffixToAmount = r.SymbolSuffixToAmount,
                            DecimalPortionWord = r.DecimalPortionWord,
                            ActiveStatus = r.ActiveStatus
                            
                        }).ToListAsync();

                    return await ds;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public async Task<List<DO_CurrencyMaster>> GetActiveCurrencyList()
        {
            try
            {
                using (eSyaEnterprise db = new eSyaEnterprise())
                {
                    var ds = db.GtEccuco.Where(w => w.ActiveStatus)
                        .Select(c => new DO_CurrencyMaster
                        {
                            CurrencyCode = c.CurrencyCode,
                            CurrencyName = c.CurrencyName

                        }).ToListAsync();

                    return await ds;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public async Task<List<DO_CurrencyMaster>> GetCurrencyListByCurrenyPrefix(string currencyPrefix)
        {
            try
            {
                using (var db = new eSyaEnterprise())
                {
                    var ds = db.GtEccuco.Where(w => w.ActiveStatus && w.CurrencyName.Trim().ToLower().StartsWith(currencyPrefix.Trim().ToLower()))
                        .Select(r => new DO_CurrencyMaster
                        {
                            CurrencyCode = r.CurrencyCode,
                            CurrencyName = r.CurrencyName
                        }).ToListAsync();

                    return await ds;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public async Task<DO_ReturnParameter> InsertIntoCurrencyMaster(DO_CurrencyMaster obj)
        {
            using (var db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {
                        var is_CurrencyCodeExist = db.GtEccuco.Where(w => w.CurrencyCode == obj.CurrencyCode).Count();
                        if (is_CurrencyCodeExist > 0)
                        {
                            return new DO_ReturnParameter { Status = false, Message = "Currency Code is already exist." };
                        }

                        var is_CurrencyNameExist = db.GtEccuco.Where(w => w.CurrencyName.Trim().ToUpper() == obj.CurrencyName.Trim().ToUpper()).Count();
                        if (is_CurrencyNameExist > 0)
                        {
                            return new DO_ReturnParameter { Status = false, Message = "Currency Name is already exist." };
                        }
                        var cu_ms = new GtEccuco()
                        {
                            CurrencyCode = obj.CurrencyCode,
                            CurrencyName = obj.CurrencyName,
                            Symbol = obj.Symbol,
                            DecimalPlaces = obj.DecimalPlaces,
                            ShowInMillions = obj.ShowInMillions,
                            SymbolSuffixToAmount = obj.SymbolSuffixToAmount,
                            DecimalPortionWord = obj.DecimalPortionWord,
                            ActiveStatus = obj.ActiveStatus,
                            FormId=obj.FormId,
                            CreatedBy = obj.UserID,
                            CreatedOn = System.DateTime.Now,
                            CreatedTerminal = obj.TerminalID
                        };
                        db.GtEccuco.Add(cu_ms);

                       await db.SaveChangesAsync();
                       dbContext.Commit();

                        return new DO_ReturnParameter() { Status = true, Message = "Currency Created Successfully" };
                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }

        public async Task<DO_ReturnParameter> UpdateCurrencyMaster(DO_CurrencyMaster obj)
        {
            using (var db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {
                        var is_CurrencyNameExist = db.GtEccuco.Where(w => w.CurrencyName.Trim().ToUpper() == obj.CurrencyName.Trim().ToUpper() && w.CurrencyCode != obj.CurrencyCode).Count();
                        if (is_CurrencyNameExist > 0)
                        {
                            return new DO_ReturnParameter { Status = false, Message = "Currency Name is already used by another currency code." };
                        }

                        GtEccuco cu_ms = db.GtEccuco.Where(w => w.CurrencyCode == obj.CurrencyCode).FirstOrDefault();
                        if (cu_ms == null)
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Currency Code is not exist" };
                        }

                        cu_ms.CurrencyName = obj.CurrencyName;
                        cu_ms.Symbol = obj.Symbol;
                        cu_ms.DecimalPlaces = obj.DecimalPlaces;
                        cu_ms.ShowInMillions = obj.ShowInMillions;
                        cu_ms.SymbolSuffixToAmount = obj.SymbolSuffixToAmount;
                        cu_ms.DecimalPortionWord = obj.DecimalPortionWord;
                        cu_ms.ActiveStatus = obj.ActiveStatus;
                        cu_ms.FormId = obj.FormId;
                        cu_ms.ModifiedBy = obj.UserID;
                        cu_ms.ModifiedOn = System.DateTime.Now;
                        cu_ms.ModifiedTerminal = obj.TerminalID;

                       await db.SaveChangesAsync();
                        dbContext.Commit();

                        return new DO_ReturnParameter() { Status = true, Message = "Currency Updated Successfully." };
                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }

        public async Task<DO_ReturnParameter> DeleteCurrencyMasterByCurrencyCode(string currencyCode)
        {
            using (var db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {
                        GtEccuco cu_ms = db.GtEccuco.Where(w => w.CurrencyCode == currencyCode).FirstOrDefault();
                        if (cu_ms == null)
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Currency Name is not exist" };
                        }

                        db.GtEccuco.Remove(cu_ms);

                       await db.SaveChangesAsync();
                        dbContext.Commit();

                        return new DO_ReturnParameter() { Status = true, Message = "Deleted Successfully." };
                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }
        #endregion

        #region Currency Denomination Information

        public async Task<List<DO_CurrencyDenominationInformation>> GetCurrencyDenominationInfoByCurrencyCode(string currencyCode)
        {
            try
            {
                using (var db = new eSyaEnterprise())
                {
                    var ds = db.GtEccudn
                         .Where(w => w.CurrencyCode.ToUpper().Replace(" ", "") == currencyCode.ToUpper().Replace(" ", ""))
                         .Select(r => new DO_CurrencyDenominationInformation
                         {
                             CurrencyCode = r.CurrencyCode,
                             BnorCnId = r.BnorCnId,
                             DenomId = r.DenomId,
                             DenomDesc = r.DenomDesc,
                             DenomConversion = r.DenomConversion,
                             Sequence = r.Sequence,
                             EffectiveDate = r.EffectiveDate,
                             ActiveStatus = r.ActiveStatus

                         }).OrderBy(o => o.Sequence).ToListAsync();

                    return await ds;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public async Task<DO_ReturnParameter> InsertCurrencyDenominationInformation(DO_CurrencyDenominationInformation obj)
        {
           
            using (var db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {
                        bool is_DenominationExist = db.GtEccudn.Any(c => c.DenomId == obj.DenomId && c.CurrencyCode.ToUpper().Replace(" ", "") == obj.CurrencyCode.ToUpper().Replace(" ", "") && c.BnorCnId == obj.BnorCnId);
                        if (is_DenominationExist)
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Currency DenominationId already exits in Selected Currency and BNOrCNId." };
                        }
                        var is_SequenceExists = await db.GtEccudn.Where(x => x.CurrencyCode.ToUpper().Replace(" ", "") == obj.CurrencyCode.ToUpper().Replace(" ", "") && x.Sequence == obj.Sequence).FirstOrDefaultAsync();
                        if (is_SequenceExists != null)
                        {
                            var seq_count =await db.GtEccudn.Where(x => x.CurrencyCode.ToUpper().Replace(" ", "") == obj.CurrencyCode.ToUpper().Replace(" ", "") && x.Sequence >= obj.Sequence).OrderBy(x => x.Sequence).ToListAsync();
                            if (seq_count != null)
                            {
                                foreach (var item in seq_count)
                                {
                                    var cur_deseq =await db.GtEccudn.Where(y => y.CurrencyCode.ToUpper().Replace(" ", "") == item.CurrencyCode.ToUpper().Replace(" ", "") &&y.Sequence==item.Sequence).FirstOrDefaultAsync();
                                    cur_deseq.Sequence = item.Sequence + 1;
                                    await db.SaveChangesAsync();
                                }
                            }
                        }
                        var cu_di = new GtEccudn()
                        {
                            CurrencyCode = obj.CurrencyCode,
                            BnorCnId = obj.BnorCnId,
                            DenomId = obj.DenomId,
                            DenomDesc = obj.DenomDesc,
                            DenomConversion = obj.DenomConversion,
                            Sequence = obj.Sequence,
                            EffectiveDate = obj.EffectiveDate,
                            ActiveStatus = obj.ActiveStatus,
                            FormId = obj.FormId,
                            CreatedBy = obj.UserID,
                            CreatedOn = System.DateTime.Now,
                            CreatedTerminal = obj.TerminalID
                        };
                        db.GtEccudn.Add(cu_di);
                        await db.SaveChangesAsync();
                        dbContext.Commit();
                        return new DO_ReturnParameter() { Status = true, Message = "Currency Denomination Created Successfully." };
                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }


        }

        public async Task<DO_ReturnParameter> UpdateCurrencyDenominationInformation(DO_CurrencyDenominationInformation obj)
        {
            using (var db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {
                        GtEccudn cu_di = db.GtEccudn.Where(w => w.CurrencyCode.ToUpper().Replace(" ", "") == obj.CurrencyCode.ToUpper().Replace(" ", "") && w.DenomId == obj.DenomId && w.BnorCnId == obj.BnorCnId).FirstOrDefault();
                        var is_SequenceExists = await db.GtEccudn.Where(x => x.CurrencyCode.ToUpper().Replace(" ", "") == obj.CurrencyCode.ToUpper().Replace(" ", "") && x.Sequence == obj.Sequence && x.DenomId != obj.DenomId).FirstOrDefaultAsync();
                        if (is_SequenceExists != null)
                        {
                            var seq_count =await db.GtEccudn.Where(x => x.CurrencyCode.ToUpper().Replace(" ", "") == obj.CurrencyCode.ToUpper().Replace(" ", "") && x.Sequence >= obj.Sequence && x.DenomId != obj.DenomId).OrderBy(x=>x.Sequence).ToListAsync();
                            if (seq_count != null)
                            {
                                foreach (var item in seq_count)
                                {
                                    var cur_deseq =await db.GtEccudn.Where(y => y.CurrencyCode.ToUpper().Replace(" ", "") == item.CurrencyCode.ToUpper().Replace(" ", "") &&y.Sequence==item.Sequence).FirstOrDefaultAsync();
                                    cur_deseq.Sequence = item.Sequence + 1;
                                    await db.SaveChangesAsync();
                                }
                            }
                        }
                        cu_di.DenomDesc = obj.DenomDesc;
                        cu_di.DenomConversion = obj.DenomConversion;
                        cu_di.Sequence = obj.Sequence;
                        cu_di.EffectiveDate = obj.EffectiveDate;
                        cu_di.ActiveStatus = obj.ActiveStatus;
                        cu_di.FormId = obj.FormId;
                        cu_di.ModifiedBy = obj.UserID;
                        cu_di.ModifiedOn = System.DateTime.Now;
                        cu_di.ModifiedTerminal = obj.TerminalID;
                        await db.SaveChangesAsync();
                        dbContext.Commit();
                        return new DO_ReturnParameter() { Status = true, Message = "Currency Denomination Updated Successfully." };
                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
            
        }

        public async Task<DO_ReturnParameter> DeleteCurrencyDenominationInformation(string currencyCode, decimal DenomId, string BnorCNId)
        {
            using (var db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {
                        GtEccudn cu_di = db.GtEccudn.Where(w => w.CurrencyCode == currencyCode && w.DenomId == DenomId && w.BnorCnId == BnorCNId).FirstOrDefault();

                        if (cu_di == null)
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Couldn't find Currency Denomination Information." };
                        }

                        db.GtEccudn.Remove(cu_di);

                        await db.SaveChangesAsync();
                        dbContext.Commit();

                        return new DO_ReturnParameter() { Status = true, Message = "Currency Denomination Deleted Successfully." };
                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }
        #endregion

        #region Currency Rate
        public List<DO_ExchangeRate> GetCurrencyExchangeRate(string Currencycode, int Businesskey)
        {
            try
            {

                List<DO_ExchangeRate> Exchangelist = new List<DO_ExchangeRate>();

                using (var db = new eSyaEnterprise())
                {

                    var cur_codes = db.GtEcbssg.Where(c => c.CurrencyCode.ToUpper().Trim() != Currencycode.ToUpper().Trim()).Join(db.GtEccuco,
                          x => x.CurrencyCode,
                          y => y.CurrencyCode,
                         (x, y) => new DO_ExchangeRate

                         {
                             CurrencyCode = x.CurrencyCode,
                             CurrencyName = y.CurrencyName
                         }).ToList();

                    foreach (var cur in cur_codes)
                    {
                        DO_ExchangeRate erObj;
                        var obj = db.GtIfcrer.Where(x => x.CurrencyCode.ToUpper().Trim() == cur.CurrencyCode.ToUpper().Trim()&&x.BusinessKey== Businesskey).OrderByDescending(x => x.DateOfExchangeRate).FirstOrDefault();
                        if (obj != null)
                        {
                            erObj = new DO_ExchangeRate()
                            {
                                BusinessKey = obj.BusinessKey,
                                CurrencyCode = obj.CurrencyCode,
                                CurrencyName = cur.CurrencyName,
                                DateOfExchangeRate = obj.DateOfExchangeRate,
                                StandardRate = obj.StandardRate,
                                SellingLastVoucherDate = obj.SellingLastVoucherDate,
                                SellingRate = obj.SellingRate,
                                BuyingLastVoucherDate = obj.BuyingLastVoucherDate,
                                BuyingRate = obj.BuyingRate,
                                ActiveStatus = obj.ActiveStatus,
                            };
                        }
                        else
                        {
                            erObj = new DO_ExchangeRate()
                            {
                                BusinessKey = 0,
                                CurrencyCode = cur.CurrencyCode,
                                CurrencyName = cur.CurrencyName,
                                DateOfExchangeRate = DateTime.Now,
                                ActiveStatus = true
                            };
                        }
                        Exchangelist.Add(erObj);
                    }
                }
                var DistinctExchangeRate = Exchangelist.GroupBy(x => x.CurrencyCode).Select(y => y.First());
                return DistinctExchangeRate.ToList();
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public async Task<DO_ExchangeRate> GetCurrencybyBusinesskey(int Businesskey)
        {
            try
            {
                using (var db = new eSyaEnterprise())
                {
                    var loc=  db.GtEcbsln.FirstOrDefault(c => c.BusinessKey == Businesskey);
                    return await  db.GtEcbssg.Where(c=>c.SegmentId==loc.SegmentId).Join(db.GtEccuco,
                         x => x.CurrencyCode,
                         y => y.CurrencyCode,
                        (x, y) => new DO_ExchangeRate

                        {
                            CurrencyCode=x.CurrencyCode,
                            CurrencyName=y.CurrencyName
                        }).FirstOrDefaultAsync();
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public async Task<DO_ReturnParameter> InsertOrUpdateCurrencyExchangeRate(DO_ExchangeRate obj)
        {
            using (var db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {

                        var exch_rate = db.GtIfcrer.Where(r => r.CurrencyCode == obj.CurrencyCode && r.DateOfExchangeRate.Date == obj.DateOfExchangeRate.Date &&r.BusinessKey==obj.BusinessKey).FirstOrDefault();
                        if (exch_rate == null)
                            {
                                var obj_rate = new GtIfcrer
                                {
                                    BusinessKey=obj.BusinessKey,
                                    CurrencyCode=obj.CurrencyCode,
                                    DateOfExchangeRate=obj.DateOfExchangeRate,
                                    StandardRate=obj.StandardRate,
                                    SellingRate=obj.SellingRate,
                                    SellingLastVoucherDate=obj.SellingLastVoucherDate,
                                    BuyingRate=obj.BuyingRate,
                                    BuyingLastVoucherDate=obj.BuyingLastVoucherDate,
                                    ActiveStatus = obj.ActiveStatus,
                                    CreatedBy = obj.UserID,
                                    CreatedOn = System.DateTime.Now,
                                    CreatedTerminal = obj.TerminalID
                                };
                                db.GtIfcrer.Add(obj_rate);
                            }
                            else
                            {
                                    exch_rate.StandardRate = obj.StandardRate;
                                    exch_rate.SellingRate = obj.SellingRate;
                                    exch_rate.SellingLastVoucherDate = obj.SellingLastVoucherDate;
                                    exch_rate.BuyingRate = obj.BuyingRate;
                                    exch_rate.BuyingLastVoucherDate = obj.BuyingLastVoucherDate;
                                    exch_rate.ActiveStatus = obj.ActiveStatus;
                                    exch_rate.ModifiedBy = obj.UserID;
                                    exch_rate.ModifiedOn = System.DateTime.Now;
                                    exch_rate.ModifiedTerminal = obj.TerminalID;
                            }
                            await db.SaveChangesAsync();
                        dbContext.Commit();
                        return new DO_ReturnParameter() { Status = true, Message = "Updated Successfully." };
                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }
        #endregion
    }
}
