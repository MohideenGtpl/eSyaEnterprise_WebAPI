using eSyaConfigSetup.DL.Repository;
using eSyaConfigSetup.DO;
using eSyaConfigSetup.IF;
using Microsoft.AspNetCore.Mvc;
using System.Threading.Tasks;
using eSyaConfigSetup.DL.DataLayer;

namespace eSyaEnterprise_WebAPI.Areas.ConfigSetup.Controllers
{
    [Route("api/[controller]/[action]")]
    [ApiController]
    public class StoreMasterController : ControllerBase
    {
        private readonly IStoreMasterRepository _StoreMasterRepository;
        public StoreMasterController(IStoreMasterRepository StoreMasterRepository)
        {
            _StoreMasterRepository = StoreMasterRepository;
        }

        #region Store Master
        /// <summary>
        /// Getting  Store Codes List.
        /// UI Reffered - Store Codes Grid
        /// </summary>
        [HttpGet]
        public async Task<IActionResult> GetStoreCodes()
        {
            var store_master = await _StoreMasterRepository.GetStoreCodes();
            return Ok(store_master);
        }
        /// <summary>
        /// Getting  Store Parameter List.
        /// UI Reffered - Store Master
        /// </summary>
        [HttpGet]
        public async Task<IActionResult> GetStoreParameterList(int StoreCode)
        {
            var sp_Param = await _StoreMasterRepository.GetStoreParameterList(StoreCode);
            return Ok(sp_Param);
        }
        /// <summary>
        /// Insert Or Update Store Codes .
        /// UI Reffered -Store Codes
        /// </summary>
        [HttpPost]
        public async Task<IActionResult> InsertOrUpdateStoreCodes(DO_StoreMaster storecodes)
        {
            var msg = await _StoreMasterRepository.InsertOrUpdateStoreCodes(storecodes);
            return Ok(msg);

        }
        [HttpGet]
        public async Task<IActionResult> DeleteStoreCode(int Storecode)
        {
            var msg = await _StoreMasterRepository.DeleteStoreCode(Storecode);
            return Ok(msg);

        }
        /// <summary>
        /// Getting  Store Codes for dropdown.
        /// UI Reffered - Business Store
        /// </summary>
        [HttpGet]
        public async Task<IActionResult> GetActiveStoreCodes()
        {
            var astore_master = await _StoreMasterRepository.GetActiveStoreCodes();
            return Ok(astore_master);
        }

        #endregion  Store Master

        #region Store Business Link

        [HttpGet]
        public async Task<IActionResult> GetBusinessKey()
        {
            var ds = await new CommonMethod().GetBusinessKey();
            return Ok(ds);
        }

        /// <summary>
        /// Getting  Store Business Link Tree.
        /// UI Reffered - Store Business Link
        /// </summary>
        [HttpGet]
        public async Task<IActionResult> GetStoreList(int BusinessKey)
        {
            var str_lst = await _StoreMasterRepository.GetStoreList(BusinessKey);
            return Ok(str_lst);

        }

        /// <summary>
        /// Getting  Store Business Link Info.
        /// UI Reffered - Store Business Link
        /// </summary>
        [HttpGet]
        public async Task<IActionResult> GetStoreBusinessLinkInfo(int BusinessKey, int StoreCode)
        {
            var b_entities = await _StoreMasterRepository.GetStoreBusinessLinkInfo(BusinessKey, StoreCode);
            return Ok(b_entities);

        }

        /// <summary>
        /// Insert Or Update Store Business Link .
        /// UI Reffered -Store Business Link
        /// </summary>
        [HttpPost]
        public async Task<IActionResult> InsertUpdateStoreBusinessLink(DO_StoreBusinessLink obj)
        {
            var msg = await _StoreMasterRepository.InsertUpdateStoreBusinessLink(obj);
            return Ok(msg);
        }
        #endregion  Store Business Link
    }
}