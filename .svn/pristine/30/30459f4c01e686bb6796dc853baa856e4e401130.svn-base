using System;
using System.Collections.Generic;
using System.Linq;
using eSyaConfigSetup.DL.DataLayer;
using eSyaConfigSetup.DL.Entities;
using eSyaConfigSetup.DO;
using eSyaConfigSetup.IF;
using Microsoft.EntityFrameworkCore;
using System.Threading.Tasks;
namespace eSyaConfigSetup.DL.Repository
{
    public class CodeTypesRepository:ICodeTypesRepository
    {
        public async Task<List<DO_CodeTypes>> GetCodeTypes()
        {
            try
            {
                using (var db = new eSyaEnterprise())
                {
                    var ds = db.GtEcapct
                        .Select(r => new DO_CodeTypes
                        {
                            CodeType = r.CodeType,
                            CodeTypeDesc = r.CodeTyepDesc,
                            UsageStatus = r.UsageStatus,
                            CodeTypeControl = r.CodeTypeControl,
                            ActiveStatus = r.ActiveStatus
                        }).ToListAsync();

                    return await ds;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public async Task<DO_ReturnParameter> InsertIntoCodeType(DO_CodeTypes obj)
        {
            using (var db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {
                        var ct_Exits = db.GtEcapct.Where(w => w.CodeType == obj.CodeType).Count();
                        if (ct_Exits > 0)
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Code Type is already Exists" };
                        }

                        bool is_CodeTypeExist = db.GtEcapct.Any(a => a.CodeTyepDesc.ToUpper().Replace(" ", "") == obj.CodeTypeDesc.ToUpper().Replace(" ", ""));
                        if (is_CodeTypeExist)
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Code Type Desc is already Exists" };
                        }

                        //int maxCodeTypeValue = db.GtEcapct.Select(c => c.CodeType).DefaultIfEmpty().Max();
                        //int codeType = maxCodeTypeValue + 1;

                        var ap_ct = new GtEcapct
                        {
                            CodeType = obj.CodeType,
                            CodeTyepDesc = obj.CodeTypeDesc.Trim(),
                            CodeTypeControl = obj.CodeTypeControl,
                            UsageStatus = obj.UsageStatus,
                            ActiveStatus = obj.ActiveStatus,
                            FormId = obj.FormID,
                            CreatedBy = obj.UserID,
                            CreatedOn = System.DateTime.Now,
                            CreatedTerminal = obj.TerminalID
                        };
                        db.GtEcapct.Add(ap_ct);

                       await db.SaveChangesAsync();
                        dbContext.Commit();

                        return new DO_ReturnParameter() { Status = true, Message = "Code Type Created Successfully" };
                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                    
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }

        public async Task<DO_ReturnParameter> UpdateCodeType(DO_CodeTypes obj)
        {
            using (var db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {
                        bool is_CodeTypeDescExist = db.GtEcapct.Any(a => a.CodeType != obj.CodeType && a.CodeTyepDesc.ToUpper().Trim().Replace(" ", "") == obj.CodeTypeDesc.ToUpper().Trim().Replace(" ", ""));
                        if (is_CodeTypeDescExist)
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Code Type is already Exists" };
                        }

                        GtEcapct ap_ct = db.GtEcapct.Where(w => w.CodeType == obj.CodeType).FirstOrDefault();
                        if (ap_ct == null)
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Code Type is not exist" };
                        }

                        ap_ct.CodeTyepDesc = obj.CodeTypeDesc.ToUpper().Trim();
                        ap_ct.CodeTypeControl = obj.CodeTypeControl;
                        ap_ct.ActiveStatus = obj.ActiveStatus;
                        ap_ct.ModifiedBy = obj.UserID;
                        ap_ct.ModifiedOn = System.DateTime.Now;
                        ap_ct.ModifiedTerminal = obj.TerminalID;
                       await db.SaveChangesAsync();
                        dbContext.Commit();

                        return new DO_ReturnParameter() { Status = true, Message = " Code Type Updated Successfully." };
                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }

        public async Task<List<DO_CodeTypes>> GetActiveCodeTypes()
        {
            try
            {
                using (var db = new eSyaEnterprise())
                {
                    var ds = db.GtEcapct
                        .Where(w => w.ActiveStatus)
                        .Select(r => new DO_CodeTypes
                        {
                            CodeType = r.CodeType,
                            CodeTypeDesc = r.CodeTyepDesc
                        }).ToListAsync();

                    return await ds;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public async Task<List<DO_CodeTypes>> GetUserDefinedCodeTypesList()
        {
            try
            {
                using (var db = new eSyaEnterprise())
                {
                    var ds = db.GtEcapct
                        .Where(w => w.ActiveStatus && w.CodeTypeControl == "U")
                        .Select(r => new DO_CodeTypes
                        {
                            CodeType = r.CodeType,
                            CodeTypeDesc = r.CodeTyepDesc
                        }).ToListAsync();

                    return await ds;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
    }
}
