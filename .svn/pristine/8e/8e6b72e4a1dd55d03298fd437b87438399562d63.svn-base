using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using eSyaConfigSetup.DL.DataLayer;
using eSyaConfigSetup.DL.Entities;
using eSyaConfigSetup.DO;
using eSyaConfigSetup.IF;
using Microsoft.EntityFrameworkCore;
namespace eSyaConfigSetup.DL.Repository
{
    public class DocumentControlRepository:IDocumentControlRepository
    {
        #region Document Control
        public async Task<List<DO_DocumentControl>> GetDocumentControls()
        {
            try
            {
                using (var db = new eSyaEnterprise())
                {
                    var result = db.GtEcdccn.Join(db.GtEcfmfd,
                        d => d.FormId,
                        f => f.FormId,
                        (d, f) => new DO_DocumentControl
                       {
                        FormId = d.FormId,
                        DocumentId  = d.DocumentId,
                        DocumentType= d.DocumentType,
                        DocumentCode= d.DocumentCode,
                        DocCodeDesc = d.DocCodeDesc,
                        DocumentCategory = d.DocumentCategory,
                        DocCatgDesc = d.DocCatgDesc,
                        IsFinancialYearAppl= d.IsFinancialYearAppl,
                        IsStoreLinkAppl = d.IsStoreLinkAppl,
                        IsTransactionModeAppl= d.IsTransactionModeAppl,
                        IsCustomerGroupAppl = d.IsCustomerGroupAppl,
                        LinkToDashboard = d.LinkToDashboard,
                        UsageStatus = d.UsageStatus,
                        ActiveStatus = d.ActiveStatus,
                        FormName=f.FormName

                  }).ToListAsync();

                    return await result;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public async Task<DO_ReturnParameter> InsertDocumentControl(DO_DocumentControl control)
        {
            using (var db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {
                        var isdocumentIdExists = db.GtEcdccn.Where(d => d.FormId == control.FormId && d.DocumentId==control.DocumentId).FirstOrDefault();
                        if (isdocumentIdExists != null)
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Document Id is already exist with selected Form." };
                        }
                        var isdocumentCodeExists = db.GtEcdccn.Where(d => d.DocumentCode.ToUpper().Replace(" ", "") == control.DocumentCode.ToUpper().Replace(" ", "") && d.FormId == control.FormId).FirstOrDefault();
                        if (isdocumentCodeExists != null)
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Document Code is already exist with selected Form." };
                        }
                        var doc_ctrl = new GtEcdccn
                        {
                            FormId = control.FormId,
                            DocumentId = control.DocumentId,
                            DocumentType = control.DocumentType,
                            DocumentCode = control.DocumentCode,
                            DocCodeDesc = control.DocCodeDesc,
                            DocumentCategory = control.DocumentCategory,
                            DocCatgDesc = control.DocCatgDesc,
                            IsFinancialYearAppl = control.IsFinancialYearAppl,
                            IsStoreLinkAppl = control.IsStoreLinkAppl,
                            IsTransactionModeAppl = control.IsTransactionModeAppl,
                            IsCustomerGroupAppl = control.IsCustomerGroupAppl,
                            LinkToDashboard = control.LinkToDashboard,
                            UsageStatus = control.UsageStatus,
                            ActiveStatus = control.ActiveStatus,
                            CreatedBy = control.UserID,
                            CreatedOn = System.DateTime.Now,
                            CreatedTerminal = control.TerminalID
                        };
                       db.GtEcdccn.Add(doc_ctrl);
                       await db.SaveChangesAsync();
                       dbContext.Commit();

                        return new DO_ReturnParameter() { Status = true, Message = "Document Control Created Successfully." };
                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }

        public async Task<DO_ReturnParameter> UpdateDocumentControl(DO_DocumentControl control)
        {
            using (var db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {
                       
                        var isdocumentCodeExists = db.GtEcdccn.Where(d => d.DocumentCode.ToUpper().Replace(" ", "") == control.DocumentCode.ToUpper().Replace(" ", "") && d.FormId == control.FormId
                        && d.DocumentId != control.DocumentId).FirstOrDefault();
                        if (isdocumentCodeExists != null)
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Document Code is already exist with selected Form." };
                        }
                        GtEcdccn doc_ctrl = db.GtEcdccn.Where(dc =>dc.FormId==control.FormId&&dc.DocumentId==control.DocumentId).FirstOrDefault();
                        if (doc_ctrl != null)
                        {
                            doc_ctrl.DocumentType = control.DocumentType;
                            doc_ctrl.DocumentCode = control.DocumentCode;
                            doc_ctrl.DocCodeDesc = control.DocCodeDesc;
                            doc_ctrl.DocumentCategory = control.DocumentCategory;
                            doc_ctrl.DocCatgDesc = control.DocCatgDesc;
                            doc_ctrl.IsFinancialYearAppl = control.IsFinancialYearAppl;
                            doc_ctrl.IsStoreLinkAppl = control.IsStoreLinkAppl;
                            doc_ctrl.IsTransactionModeAppl = control.IsTransactionModeAppl;
                            doc_ctrl.IsCustomerGroupAppl = control.IsCustomerGroupAppl;
                            doc_ctrl.LinkToDashboard = control.LinkToDashboard;
                            doc_ctrl.UsageStatus = control.UsageStatus;
                            doc_ctrl.ActiveStatus = control.ActiveStatus;
                            doc_ctrl.ModifiedBy = control.UserID;
                            doc_ctrl.ModifiedOn = System.DateTime.Now;
                            doc_ctrl.ModifiedTerminal = control.TerminalID;
                           await db.SaveChangesAsync();
                            dbContext.Commit();
                            return new DO_ReturnParameter() { Status = true, Message = "Document Control Updated Successfully." };

                        }

                        else
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Document Control does Not Exists." };

                        }
                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }
        #endregion Document Control

        #region Calendar Defination
        public async Task<DO_ReturnParameter> InsertCalendarHeaderAndDetails(DO_CalendarDefinition calendarheadar)
            {
                using (eSyaEnterprise db = new eSyaEnterprise())
                {
                    using (var dbContext = db.Database.BeginTransaction())
                    {
                        try
                        {

                            int financialcalr = Convert.ToInt32(calendarheadar.FinancialYear);

                            var isCalendarExists = db.GtEcclco.Where(x => x.FinancialYear == financialcalr && x.Status == true).FirstOrDefault();

                            if (isCalendarExists == null)
                            {
                                GtEcclco calheader = new GtEcclco();
                                calheader.FinancialYear = Convert.ToInt32(calendarheadar.FinancialYear);
                                calheader.FromDate = calendarheadar.FromDate;
                                calheader.TillDate = calendarheadar.TillDate;
                                calheader.Status = calendarheadar.Status;
                                calheader.FormId = calendarheadar.FormId;
                                calheader.CreatedBy = calendarheadar.UserID;
                                calheader.CreatedOn =System.DateTime.Now;
                                calheader.CreatedTerminal = calendarheadar.TerminalID;
                                db.GtEcclco.Add(calheader);
                               await db.SaveChangesAsync();
                                List<int> MonthIds = new List<int>();
                                string months;
                                var financeyear = Convert.ToInt32(calendarheadar.FinancialYear);

                                for (int i = calendarheadar.FromDate.Month; i <= calendarheadar.TillDate.Month; i++)
                                {
                                if (i.ToString().Length == 1)
                                {
                                    string strMonth = 0 + i.ToString();
                                    months = financeyear.ToString() + "" + strMonth;
                                }
                                else
                                {
                                    months = financeyear.ToString() + "" + i.ToString();
                                   
                                }
                                
                                MonthIds.Add(Convert.ToInt32(months));
                            }

                                GtEccldt caldetails = new GtEccldt();

                            var BusinessKeys = db.GtEcbsln.Where(x => x.ActiveStatus == true).ToList();
                            foreach (var bkey in BusinessKeys)
                            {
                                foreach (var month in MonthIds)
                                {
                                var calendardetailsExists = db.GtEccldt.Where(x => x.BusinessKey == bkey.BusinessKey &&
                                  x.FinancialYear == Convert.ToInt32(calendarheadar.FinancialYear) && x.MonthId == month && x.ActiveStatus==true).FirstOrDefault();
                                if (calendardetailsExists != null)
                                {
                                    return new DO_ReturnParameter() { Status = false, Message = "Month is Already Exists for the Financial Year and Business Key." };
                                }
                                else
                                {
                                    caldetails.BusinessKey = bkey.BusinessKey;
                                    caldetails.FinancialYear = Convert.ToInt32(calendarheadar.FinancialYear);
                                    caldetails.MonthId = month;
                                    caldetails.MonthFreezeHis = false;
                                    caldetails.MonthFreezeFin = false;
                                    caldetails.MonthFreezeHr = false;
                                    caldetails.PatientIdgen = 0;
                                    caldetails.PatientIdserial = "0";
                                    caldetails.BudgetMonth = "Q";
                                    caldetails.ActiveStatus = true;
                                    caldetails.FormId = calendarheadar.FormId;
                                    caldetails.CreatedBy = calendarheadar.UserID;
                                    caldetails.CreatedOn = DateTime.Now;
                                    caldetails.CreatedTerminal = calendarheadar.TerminalID;
                                    db.GtEccldt.Add(caldetails);
                                   await db.SaveChangesAsync();
                                }
                              }
                            }

                            dbContext.Commit();
                           
                                return new DO_ReturnParameter() { Status = true, Message = "Calender Created Successfully." };
                            }
                            else
                            {
                                return new DO_ReturnParameter() { Status = false, Message = "Calendar Already Exists." };
                            }
                        }

                        catch (Exception ex)
                        {
                            dbContext.Rollback();
                            throw ex;
                        }
                    }




                }
            }

        public async Task<DO_ReturnParameter> UpdateCalendardetails(DO_CalendarDetails caldetails)
        {
            using (eSyaEnterprise db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {
                        var calendardetails = db.GtEccldt.Where(x => x.MonthId == caldetails.MonthId && x.BusinessKey == caldetails.BusinessKey && x.FinancialYear ==Convert.ToInt32(caldetails.FinancialYear)).FirstOrDefault();
                        if (calendardetails != null)
                        {
                            calendardetails.MonthFreezeHis = caldetails.MonthFreezeHis;
                            calendardetails.MonthFreezeFin = caldetails.MonthFreezeFin;
                            calendardetails.MonthFreezeHr = caldetails.MonthFreezeHr;
                            //calendardetails.PatientIdgen = caldetails.PatientIdgen;
                            calendardetails.PatientIdserial = caldetails.PatientIdserial;
                            calendardetails.BudgetMonth = caldetails.BudgetMonth;
                            calendardetails.ActiveStatus = caldetails.ActiveStatus;
                            calendardetails.ModifiedBy = caldetails.UserID;
                            calendardetails.ModifiedOn = DateTime.Now;
                            calendardetails.ModifiedTerminal = caldetails.TerminalID;
                            await db.SaveChangesAsync();
                            dbContext.Commit();
                            return new DO_ReturnParameter() { Status = true, Message = "Calendar details updated Successfully." };
                        }
                        else
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Calendar details not found." };
                        }

                    }

                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }

       
        public  List<DO_CalendarDetails> GetCalendarDetailsbyBusinessKeyAndFinancialYear(int BusinessKey ,decimal FinancialYear)
        {
            try
            {
                using (eSyaEnterprise db = new eSyaEnterprise())
                {
                    if (BusinessKey != 0 && FinancialYear == 0)
                    {
                        return GetCalendarDetailsbyBusinessKey(BusinessKey);
                    }
                    var result = db.GtEccldt.Where(h =>h.BusinessKey==BusinessKey && h.FinancialYear == FinancialYear).Join(db.GtEcclco,
                     x => x.FinancialYear,
                     y => y.FinancialYear,

                     (x, y) => new DO_CalendarDetails
                     {

                         BusinessKey=x.BusinessKey,
                         FinancialYear = y.FinancialYear,
                         MonthId = x.MonthId,
                         EditMonthId = x.MonthId,
                         MonthFreezeHis = x.MonthFreezeHis,
                         MonthFreezeFin = x.MonthFreezeFin,
                         MonthFreezeHr = x.MonthFreezeHr,
                         PatientIdgen = x.PatientIdgen,
                         PatientIdserial = x.PatientIdserial,
                         BudgetMonth = x.BudgetMonth,
                         ActiveStatus = x.ActiveStatus,
                         Fromdate = y.FromDate,
                         Tilldate = y.TillDate,
                      
                     }).ToList();

                    List<DO_CalendarDetails> CalendarDtailslist = new List<DO_CalendarDetails>();

                    foreach (var item in result)
                    {
                        DO_CalendarDetails objcalendar = new DO_CalendarDetails();
                        objcalendar.BusinessKey = item.BusinessKey;
                        objcalendar.FinancialYear = item.FinancialYear;
                        objcalendar.MonthId = item.MonthId;
                        objcalendar.EditMonthId = item.MonthId;
                        objcalendar.MonthFreezeHis = item.MonthFreezeHis;
                        objcalendar.MonthFreezeFin = item.MonthFreezeFin;
                        objcalendar.MonthFreezeHr = item.MonthFreezeHr;
                        objcalendar.PatientIdgen = item.PatientIdgen;
                        objcalendar.PatientIdserial = item.PatientIdserial;
                        objcalendar.BudgetMonth = item.BudgetMonth;
                        objcalendar.ActiveStatus = item.ActiveStatus;
                        objcalendar.Fromdate = item.Fromdate;
                        objcalendar.Tilldate = item.Tilldate;
                        String Monthlength = item.MonthId.ToString();
                        String firstletter = "";
                        if (!string.IsNullOrEmpty(Monthlength))
                        {
                            firstletter = Monthlength.Remove(0, 4);
                        }
                       
                        if (firstletter == "01")
                        {
                            objcalendar.MonthDescription = "January";


                        }
                        if (firstletter == "02")
                        {
                            objcalendar.MonthDescription = "February";

                        }
                        if (firstletter == "03")
                        {
                            objcalendar.MonthDescription = "March";

                        }
                        if (firstletter == "04")
                        {
                            objcalendar.MonthDescription = "April";

                        }
                        if (firstletter == "05")
                        {
                            objcalendar.MonthDescription = "May";

                        }
                        if (firstletter == "06")
                        {
                            objcalendar.MonthDescription = "June";

                        }
                        if (firstletter == "07")
                        {
                            objcalendar.MonthDescription = "July";

                        }
                        if (firstletter == "08")
                        {
                            objcalendar.MonthDescription = "August";

                        }
                        if (firstletter == "09")
                        {
                            objcalendar.MonthDescription = "September";

                        }
                        if (firstletter == "10")
                        {
                            objcalendar.MonthDescription = "October";

                        }
                        if (firstletter == "11")
                        {
                            objcalendar.MonthDescription = "November";

                        }
                        if (firstletter == "12")
                        {
                            objcalendar.MonthDescription = "December";

                        }
                        CalendarDtailslist.Add(objcalendar);
                    }


                    return CalendarDtailslist.ToList();


                }
            }
            catch (Exception)
            {

                throw;
            }
        }
        public List<DO_CalendarDetails> GetCalendarDetailsbyBusinessKey(int BusinessKey)
        {
            try
            {
                using (eSyaEnterprise db = new eSyaEnterprise())
                {
                    var result = db.GtEccldt.Where(k=>k.BusinessKey==BusinessKey).Join(db.GtEcclco,
                     x => x.FinancialYear,
                     y => y.FinancialYear,

                     (x, y) => new DO_CalendarDetails
                     {

                         BusinessKey = x.BusinessKey,
                         FinancialYear = y.FinancialYear,
                         MonthId = x.MonthId,
                         EditMonthId = x.MonthId,
                         MonthFreezeHis = x.MonthFreezeHis,
                         MonthFreezeFin = x.MonthFreezeFin,
                         MonthFreezeHr = x.MonthFreezeHr,
                         PatientIdgen = x.PatientIdgen,
                         PatientIdserial = x.PatientIdserial,
                         BudgetMonth = x.BudgetMonth,
                         ActiveStatus = x.ActiveStatus,
                         Fromdate = y.FromDate,
                         Tilldate = y.TillDate,

                     }).ToList();

                    List<DO_CalendarDetails> CalendarDtailslist = new List<DO_CalendarDetails>();

                    foreach (var item in result)
                    {
                        DO_CalendarDetails objcalendar = new DO_CalendarDetails();
                        objcalendar.BusinessKey = item.BusinessKey;
                        objcalendar.FinancialYear = item.FinancialYear;
                        objcalendar.MonthId = item.MonthId;
                        objcalendar.EditMonthId = item.MonthId;
                        objcalendar.MonthFreezeHis = item.MonthFreezeHis;
                        objcalendar.MonthFreezeFin = item.MonthFreezeFin;
                        objcalendar.MonthFreezeHr = item.MonthFreezeHr;
                        objcalendar.PatientIdgen = item.PatientIdgen;
                        objcalendar.PatientIdserial = item.PatientIdserial;
                        objcalendar.BudgetMonth = item.BudgetMonth;
                        objcalendar.ActiveStatus = item.ActiveStatus;
                        objcalendar.Fromdate = item.Fromdate;
                        objcalendar.Tilldate = item.Tilldate;
                        String Monthlength = item.MonthId.ToString();
                        String firstletter = "";
                        if (!string.IsNullOrEmpty(Monthlength))
                        {
                            firstletter = Monthlength.Remove(0, 4);
                        }
                        if (firstletter == "01")
                        {
                            objcalendar.MonthDescription = "January";


                        }
                        if (firstletter == "02")
                        {
                            objcalendar.MonthDescription = "February";

                        }
                        if (firstletter == "03")
                        {
                            objcalendar.MonthDescription = "March";

                        }
                        if (firstletter == "04")
                        {
                            objcalendar.MonthDescription = "April";

                        }
                        if (firstletter == "05")
                        {
                            objcalendar.MonthDescription = "May";

                        }
                        if (firstletter == "06")
                        {
                            objcalendar.MonthDescription = "June";

                        }
                        if (firstletter == "07")
                        {
                            objcalendar.MonthDescription = "July";

                        }
                        if (firstletter == "08")
                        {
                            objcalendar.MonthDescription = "August";

                        }
                        if (firstletter == "09")
                        {
                            objcalendar.MonthDescription = "September";

                        }
                        if (firstletter == "10")
                        {
                            objcalendar.MonthDescription = "October";

                        }
                        if (firstletter == "11")
                        {
                            objcalendar.MonthDescription = "November";

                        }
                        if (firstletter == "12")
                        {
                            objcalendar.MonthDescription = "December";

                        }
                        CalendarDtailslist.Add(objcalendar);
                    }


                    return CalendarDtailslist.ToList();


                }
            }
            catch (Exception)
            {

                throw;
            }
        }
        public async Task<List<DO_CalendarDefinition>> GetCalendarHeaders()
        {
            try
            {
                using (var db = new eSyaEnterprise())
                {
                    var result = db.GtEcclco

                                 .Select(c => new DO_CalendarDefinition
                                 {
                                     FinancialYear=c.FinancialYear,
                                     FromDate=c.FromDate,
                                     TillDate=c.TillDate,
                                     Status=c.Status
                                 }).OrderByDescending(x=>x.FinancialYear).ToListAsync();
                    return await result;

                 
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public async Task<List<DO_CalendarDetails>> GetFinancialYearbyBusinessKey(int Businesskey)
        {
            try
            {
                using (var db = new eSyaEnterprise())
                {
                    var result = db.GtEccldt.Where(x=>x.BusinessKey==Businesskey)

                                 .Select(c => new DO_CalendarDetails
                                 {
                                     FinancialYear =c.FinancialYear
                                     
                                 }).OrderByDescending(x => x.FinancialYear).Distinct().ToListAsync();
                    return await result;


                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion Calendar Defination
    }
}

